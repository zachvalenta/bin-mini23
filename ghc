YEAR_START=$(date +%Y-01-01T00:00:00Z)
TODAY=$(date +%Y-%m-%dT23:59:59Z)
USERNAME="zachvalenta"

(gh api graphql -F query='
query($username: String!, $from: DateTime!, $to: DateTime!) {
  user(login: $username) {
    contributionsCollection(from: $from, to: $to) {
      contributionCalendar {
        weeks {
          contributionDays {
            date
            contributionCount
          }
        }
      }
    }
  }
}' -F username="$USERNAME" -F from="$YEAR_START" -F to="$TODAY" | 
jq -r '.data.user.contributionsCollection.contributionCalendar.weeks[].contributionDays[] | "\(.date): \(.contributionCount)"' |
awk '
BEGIN { 
    FS=":"
    printf "# ROLLING \n" 
}
{ 
    dates[NR] = $1
    counts[NR] = $2
    arr[NR] = $2
    sum += $2
}
END {
    n = length(arr)
    recent_sum = 0
    
    # Print and sum last 10 days
    start = (n > 10) ? n-9 : 1
    for (i = start; i <= n; i++) {
        print dates[i] ": " counts[i]
        recent_sum += counts[i]
    }
    
    recent_mean = recent_sum/10
    
    # Recent median
    for (i = 1; i <= 10; i++) recent_arr[i] = counts[n-10+i]
    for (i = 1; i <= 10; i++)
        for (j = 1; j <= 10-i; j++)
            if (recent_arr[j] > recent_arr[j+1]) {
                temp = recent_arr[j]
                recent_arr[j] = recent_arr[j+1]
                recent_arr[j+1] = temp
            }
    recent_median = (recent_arr[5] + recent_arr[6]) / 2
    
    # All-time stats
    mean = sum/n
    projected = (sum/n) * 365.0
    
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n-i; j++)
            if (arr[j] > arr[j+1]) {
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
            }
    
    if (n % 2) median = arr[int(n/2) + 1]
    else median = (arr[n/2] + arr[n/2 + 1]) / 2

    printf "\n# STATS\n\n"
    printf "\n## rolling\n\n"
    printf "%-25s %5d\n", "mean", recent_mean
    printf "%-25s %5d\n", "median", recent_median
    printf "\n## yearly\n\n"
    printf "%-25s %5d\n", "total", sum
    printf "%-25s %5d\n", "projected", projected
    printf "%-25s %5d\n", "max", arr[n]
    printf "%-25s %5d\n", "mean", mean
    printf "%-25s %5d\n", "median", median

}') | gum format
